{"version":3,"sources":["MyContext.js","utils.js","components/Todo/Todo.js","components/Post/Post.js","components/User/User.js","components/UsersList/Users.js","components/MasterDetails/MasterDetails.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","getUsersList","a","axios","get","resp","data","map","user","id","name","email","otherData","street","address","city","zipcode","console","log","getTodosUser","userId","todos","filter","task","getPostsUser","posts","updateUser","put","deleteUser","delete","updateIsTaskCompletedInTodos","addNewTodo","obj","title","completed","post","addNewPost","body","addNewUser","Todo","props","useState","isNewTodo","setIsNewTodo","setTitle","className","type","value","onClick","onChange","e","target","addNewTask","error","newTaskTodos","index","key","updateCompleted","Post","isNewPost","setIsNewPost","setBody","newPost","User","setName","setEmail","isOtherData","setisOtherData","borderLineColor","setBorderLineColor","backgroundColor","setBackgroundColor","useEffect","allTasksCompleted","selectedUser","isSelected","style","border","background","setSelected","isNewUser","Users","setSelectedUser","idNewTodo","setIdNewTodo","idNewPost","setIdNewPost","Consumer","context","users","update","selected","updateCompletedTask","addNewTaskToTodos","taskToadd","postToadd","MasterDetails","usersOrigin","setUsersOrigin","setUsers","searchField","setSearchField","isTaskCompleted","setIsTaskCompleted","setIsNewUser","newUser","setNewUser","usersList","utils","then","forAwait","filteredUsers","toLowerCase","includes","checkIfAllTodosDone","flag","userRest","push","Provider","placeholder","userToUpdate","newUsers","userToDelete","lenTodosUser","length","lenPostsUser","particlesOptions","particles","number","density","enable","value_area","App","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"kVAIeA,EAFGC,IAAMC,gB,iBC6IT,GAACC,aA7IE,uCAAG,8BAAAC,EAAA,+EAEIC,IAAMC,IAAI,8CAFd,UAETC,EAFS,SAGTC,EAAOD,EAAKC,MAHH,yCAKJA,EAAKC,KAAK,SAACC,GAChB,MAAQ,CAACC,GAAID,EAAKC,GAAIC,KAAMF,EAAKE,KAAMC,MAAOH,EAAKG,MAC/CC,UAAW,CAACC,OAASL,EAAKM,QAAQD,OAASE,KAAMP,EAAKM,QAAQC,KAAOC,QAASR,EAAKM,QAAQE,cAPtF,uDAcbC,QAAQC,IAAI,uBAAZ,MAda,yDAAH,qDA6IYC,aAhGZ,uCAAG,WAAOC,GAAP,mBAAAlB,EAAA,+EAEIC,IAAMC,IAAN,8CAFJ,cAETC,EAFS,OAGTC,EAAOD,EAAKC,KACZe,EAAQf,EAAKgB,QAAQ,SAAAC,GACrB,OAAOA,EAAKH,SAAWA,KALd,kBAQNC,GARM,gCAWbJ,QAAQC,IAAI,uBAAZ,MAXa,yDAAH,sDAgG0BM,aAjF1B,uCAAG,WAAOJ,GAAP,mBAAAlB,EAAA,+EAEIC,IAAMC,IAAN,8CAFJ,cAETC,EAFS,OAGTC,EAAOD,EAAKC,KACZmB,EAAQnB,EAAKgB,QAAQ,SAAAC,GACrB,OAAOA,EAAKH,SAAWA,KALd,kBAQNK,GARM,gCAWbR,QAAQC,IAAI,uBAAZ,MAXa,yDAAH,sDAiFwCQ,WAlE1C,uCAAG,WAAOlB,GAAP,eAAAN,EAAA,+EAGMC,IAAMwB,IAAN,qDAAwDnB,EAAKC,IAAMD,GAHzE,OAGPH,EAHO,OAIXY,QAAQC,IAAI,mBAAoBb,EAAKC,MAJ1B,gDAOXW,QAAQC,IAAI,qBAAZ,MAPW,yDAAH,sDAkEsDU,WAtDtD,uCAAG,WAAOpB,GAAP,eAAAN,EAAA,+EAEMC,IAAM0B,OAAN,qDAA2DrB,EAAKC,IAAMD,GAF5E,OAEPH,EAFO,OAGXY,QAAQC,IAAI,cAAeb,EAAKC,MAHrB,gDAMXW,QAAQC,IAAI,qBAAZ,MANW,yDAAH,sDAuDJY,6BA7CsB,uCAAG,WAAOP,GAAP,eAAArB,EAAA,+EAEZC,IAAMwB,IAAN,qDAAwDJ,EAAKd,IAAMc,GAFvD,OAEzBlB,EAFyB,OAG7BY,QAAQC,IAAI,uBAAwBb,EAAKC,MAHZ,gDAM7BW,QAAQC,IAAI,uCAAZ,MAN6B,yDAAH,sDA6CQa,WAnC1B,uCAAG,WAAOR,GAAP,iBAAArB,EAAA,sEAEP8B,EAAM,CAACZ,OAAQG,EAAKH,OAASa,MAAOV,EAAKU,MAAOC,UAAWX,EAAKW,WAFzD,SAGM/B,IAAMgC,KAAN,6CAAyDH,GAH/D,OAGP3B,EAHO,OAIXY,QAAQC,IAAI,YAAab,EAAKC,MAJnB,gDAOXW,QAAQC,IAAI,qBAAZ,MAPW,yDAAH,sDAmCsCkB,WAxBtC,uCAAG,WAAOD,GAAP,iBAAAjC,EAAA,sEAEP8B,EAAM,CAACZ,OAAQe,EAAKf,OAASa,MAAOE,EAAKF,MAAOI,KAAMF,EAAKE,MAFpD,SAGMlC,IAAMgC,KAAN,6CAAyDH,GAH/D,OAGP3B,EAHO,OAIXY,QAAQC,IAAI,YAAab,EAAKC,MAJnB,gDAOXW,QAAQC,IAAI,qBAAZ,MAPW,yDAAH,sDAwBkDoB,WAblD,uCAAG,WAAO9B,GAAP,iBAAAN,EAAA,sEAEP8B,EAAM,CAACtB,KAAMF,EAAKE,KAAMC,MAAOH,EAAKG,OAF7B,SAGMR,IAAMgC,KAAN,6CAAyDH,GAH/D,cAGP3B,EAHO,OAIXY,QAAQC,IAAI,YAAab,EAAKC,MAJnB,kBAKJD,EAAKC,MALD,gCAQXW,QAAQC,IAAI,qBAAZ,MARW,yDAAH,uDCvEDqB,G,OAzDF,SAACC,GAAW,IAAD,EAEcC,oBAAS,GAFvB,mBAEbC,EAFa,KAEFC,EAFE,OAIMF,mBAAS,IAJf,mBAIbR,EAJa,KAINW,EAJM,KAyBpB,OACI,6BACA,2CAAiBJ,EAAMpB,QACvB,2BAAOyB,UAAU,aAAaC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBAAML,GAAa,MACjF,yBAAKE,UAAU,cAEVH,EACD,yBAAKG,UAAU,YAAf,UACW,2BAAOC,KAAK,OAAOG,SAAQ,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,sEAAmB0C,EAASM,EAAEC,OAAOJ,OAArC,mFAAH,wDAClC,2BAAOF,UAAU,SAASC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBApBzD,WACjB,IACI,IAAIzB,EAAO,CAACH,OAAQoB,EAAMnB,MAAM,GAAGD,OAAQX,GAAI,EAAGwB,MAAOA,EAAOC,WAAW,GAC3EM,EAAMY,WAAW7B,GACjBoB,GAAa,GAEjB,MAAMO,GACFjC,QAAQoC,MAAM,UAAWH,IAamDI,MACpE,2BAAOT,UAAU,SAASC,KAAK,SAASC,MAAM,SAASC,QAAU,kBAAML,GAAa,OAGvFH,EAAMnB,MACHmB,EAAMnB,MAAMd,KAAK,SAACgB,EAAMgC,GACpB,OACI,yBAAKC,IAAKjC,EAAKd,GAAIoC,UAAU,aACxBtB,EAAKd,GADV,IACc,6BADd,UAEYc,EAAKU,MAFjB,IAEwB,6BAFxB,cAGiBV,EAAKW,UAAa,MAAQ,KACpCX,EAAKW,UAGR,KAFA,2BAAOW,UAAU,aAAaC,KAAK,SAASC,MAAM,iBAAiBC,QAAU,kBAAMR,EAAMiB,gBAAgBlC,EAAKgC,MALlH,IAOU,iCAEb,SCJVG,G,OA7CF,SAAClB,GAAW,IAAD,EAEcC,oBAAS,GAFvB,mBAEbkB,EAFa,KAEFC,EAFE,OAIMnB,mBAAS,IAJf,mBAIbR,EAJa,KAINW,EAJM,OAKIH,mBAAS,IALb,mBAKbJ,EALa,KAKPwB,EALO,KAapB,OACI,6BACA,yBAAKhB,UAAU,qBACX,2CAAiBL,EAAMpB,QACvB,2BAAOyB,UAAU,aAAaC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBAAMY,GAAa,OAEzF,yBAAKf,UAAU,cAINc,EACD,yBAAKd,UAAU,YAAf,UACW,2BAAOC,KAAK,OAAOG,SAAQ,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,sEAAmB0C,EAASM,EAAEC,OAAOJ,OAArC,mFAAH,wDAAmD,6BADzF,SAEU,2BAAOD,KAAK,OAAOG,SAAQ,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,sEAAmB2D,EAAQX,EAAEC,OAAOJ,OAApC,mFAAH,wDAAkD,6BACnF,2BAAOF,UAAU,SAASC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBApB9D,WACZ,IAAIb,EAAO,CAACf,OAAQoB,EAAMf,MAAM,GAAGL,OAAQX,GAAI,EAAGwB,MAAOA,EAAOI,KAAMA,GACtEG,EAAMJ,WAAWD,GACjByB,GAAa,GAiBmEE,MACpE,2BAAOjB,UAAU,SAASC,KAAK,SAASC,MAAM,SAASC,QAAU,kBAAMY,GAAa,OAGxFpB,EAAMf,MAAMlB,KAAK,SAAC4B,GACd,OACI,yBAAKqB,IAAKrB,EAAK1B,GAAIoC,UAAU,aACxBV,EAAK1B,GADV,IACc,6BADd,UAEY0B,EAAKF,MAFjB,IAEwB,6BAFxB,SAGWE,EAAKE,aC+CzB0B,G,OAhFF,SAACvB,GAAW,IAAD,EAEIC,mBAASD,EAAMhC,KAAKE,MAFxB,mBAEbA,EAFa,KAEPsD,EAFO,OAGMvB,mBAASD,EAAMhC,KAAKG,OAH1B,mBAGbA,EAHa,KAGNsD,EAHM,OAKkBxB,oBAAS,GAL3B,mBAKbyB,EALa,KAKAC,EALA,OAO0B1B,mBAAS,oBAPnC,mBAOb2B,EAPa,KAOIC,EAPJ,OAQ0B5B,mBAAS,IARnC,mBAQb6B,EARa,KAQIC,EARJ,KAUpBC,qBAAW,WACHhC,EAAMhC,KAAKiE,mBACXJ,EAAmB,qBAExB,CAAC7B,EAAMhC,KAAKiE,oBAEfD,qBAAW,WACJhC,EAAMhC,KAAKC,KAAO+B,EAAMkC,aAAajE,IAAK+B,EAAMkC,aAAaC,WAC5DJ,EAAmB,WAGnBA,EAAmB,MAExB,CAAC/B,EAAMkC,aAAclC,EAAMhC,KAAKC,KAmBnC,OACI,yBAAKoC,UAAU,YAAY+B,MAAO,CAAEC,OAAO,GAAD,OAAKT,GAAmBU,WAAW,GAAD,OAAKR,KAC7E,2BAAOzB,UAAU,SAASC,KAAK,SAASC,MAAK,cAASP,EAAMhC,KAAKC,IAC7DuC,QAAU,kBATW,IAAzBR,EAAMkC,aAAajE,KACnB+B,EAAMkC,aAAaC,YAAcnC,EAAMkC,aAAaC,iBAExDnC,EAAMuC,YAAY,CAACtE,GAAI+B,EAAMhC,KAAKC,GAAIkE,YAAanC,EAAMkC,aAAaC,gBAItE,IAEwC,6BAFxC,SAIU,2BAAO9B,UAAU,WAAWC,KAAK,OAAOC,MAAOrC,EAAMuC,SAAW,SAAAC,GAAC,OAAIc,EAAQd,EAAEC,OAAOJ,UAJhG,IAI0G,6BAJ1G,UAKW,2BAAOF,UAAU,WAAWC,KAAK,OAAOC,MAAOpC,EAAOsC,SAAW,SAAAC,GAAC,OAAIe,EAASf,EAAEC,OAAOJ,UALnG,IAK8G,6BAC1G,2BAAOF,UAAU,SAASC,KAAK,SAASC,MAAM,aAAaC,QAAS,kBAAMmB,GAAgBD,MAErFA,EACG,yBAAKrB,UAAU,wBAEVL,EAAMhC,KAAKI,UACZ,wCACY,2BAAOiC,UAAU,qBAAqBC,KAAK,OAAOC,MAAOP,EAAMhC,KAAKI,UAAUC,SAD1F,IACqG,6BADrG,SAEU,2BAAOgC,UAAU,qBAAqBC,KAAK,OAAOC,MAAOP,EAAMhC,KAAKI,UAAUG,OAFxF,IAEiG,6BAFjG,aAGc,2BAAO8B,UAAU,qBAAqBC,KAAK,OAAOC,MAAOP,EAAMhC,KAAKI,UAAUI,UAH5F,IAGwG,8BAC/F,iDAGb,KAER,2BAAO6B,UAAU,SAASC,KAAK,SAASC,MAAM,SAASC,QAAU,kBAvCtD,WACf,IAAMxC,EAAO,CAAEC,GAAI+B,EAAMhC,KAAKC,GAAIC,KAAKA,EAAMC,MAAOA,EAAOC,UAAW4B,EAAMhC,KAAKI,WACjF4B,EAAMd,WAAWlB,GAqC0DkB,MACvE,2BAAOmB,UAAU,SAASC,KAAK,SAASC,MAAM,SAASC,QAAU,kBAnCtD,WACf,IAAMxC,EAAO,CAAEC,GAAI+B,EAAMhC,KAAKC,GAAIC,KAAKA,EAAMC,MAAOA,EAAOC,UAAW4B,EAAMhC,KAAKI,WACjF4B,EAAMZ,WAAWpB,GAiC0DoB,MAElEY,EAAMkC,aAAajE,KAAO+B,EAAMhC,KAAKC,IAAM+B,EAAMkC,aAAaC,aAAkC,IAApBnC,EAAMwC,UACnF,yBAAKxB,IAAKhB,EAAMhC,KAAKC,GAAIoC,UAAU,mBAC/B,kBAAC,EAAD,CAAMzB,OAAQoB,EAAMhC,KAAKC,GAAIY,MAAOmB,EAAMhC,KAAKa,MAAOoC,gBAAiBjB,EAAMiB,gBACzEL,WAAYZ,EAAMY,aACtB,kBAAC,EAAD,CAAMhC,OAAQoB,EAAMhC,KAAKC,GAAIgB,MAAOe,EAAMhC,KAAKiB,MAAOW,WAAYI,EAAMJ,cAG5E,QCnCD6C,EAxCD,SAACzC,GAAW,IAAD,EAEmBC,mBAAS,CAAChC,GAAI,EAAGkE,YAAY,IAFhD,mBAEdD,EAFc,KAEAQ,EAFA,OAIazC,mBAAS,KAJtB,mBAId0C,EAJc,KAIHC,EAJG,OAKa3C,mBAAS,KALtB,mBAKd4C,EALc,KAKHC,EALG,KAqBrB,OACI,kBAAC,EAAUC,SAAX,MAEI,SAAAC,GAAO,OACHA,EAAQC,MAAMlF,KAAK,SAAAC,GACf,OAAO,kBAAC,EAAD,CAAMgD,IAAKhD,EAAKC,GAAID,KAAMA,EAAMkB,WAAYc,EAAMkD,OAAQ9D,WAAYY,EAAMX,OACnF6C,aAAcA,EAAcK,YAAc,SAACY,GAAD,OAAcT,EAAgBS,IACxElC,gBAAiBjB,EAAMoD,oBACvBxC,WAAa,SAAC7B,GAAD,OArBX,SAACA,GAEfA,EAAKd,GAAK0E,EAAY,EACtBC,EAAa7D,EAAKd,IAClB+B,EAAMqD,kBAAkBtE,GAiBWuE,CAAUvE,IACjCa,WAAe,SAACD,GAAD,OAfb,SAACA,GACfA,EAAK1B,GAAK4E,EAAY,EACtBC,EAAanD,EAAK1B,IAClB+B,EAAMJ,WAAWD,GAYoB4D,CAAU5D,IACnC6C,UAAWQ,EAAQR,mBC4JxBgB,G,OAxLO,WAAO,IAAD,EAEcvD,mBAAS,IAFvB,mBAEjBwD,EAFiB,KAEJC,EAFI,OAGCzD,mBAAS,IAHV,mBAGjBgD,EAHiB,KAGXU,EAHW,OAIc1D,mBAAS,IAJvB,mBAIjB2D,EAJiB,KAIJC,EAJI,OAMsB5D,oBAAS,GAN/B,mBAMjB6D,EANiB,KAMAC,EANA,OAQU9D,oBAAS,GARnB,mBAQjBuC,EARiB,KAQNwB,EARM,OASA/D,mBAAS,IATT,mBASjB/B,EATiB,KASXsD,EATW,OAUEvB,mBAAS,IAVX,mBAUjB9B,EAViB,KAUVsD,EAVU,OAWMxB,mBAAS,IAXf,mBAWjBgE,EAXiB,KAWRC,EAXQ,KAaxBlC,qBAAW,WACP,IAAImC,EADS,4CAEb,sBAAAzG,EAAA,sEACU0G,EAAM3G,eAAe4G,MAAK,SAAAxG,GAAI,OAAIsG,EAAYtG,KADxD,uBAEUsG,EAAUpG,KAAK,SAAAC,GAGjB,OAFAoG,EAAMzF,aAAaX,EAAKC,IAAIoG,MAAM,SAAAxG,GAAI,OAAIG,EAAKa,MAAQhB,KACvDuG,EAAMpF,aAAahB,EAAKC,IAAIoG,MAAM,SAAAxG,GAAI,OAAIG,EAAKiB,MAAQpB,KAChDG,KALf,OAQA2F,EAASQ,GACTT,EAAeS,GATf,4CAFa,0DAcbG,KACD,IAOHtC,qBAAW,WACP,IAAMuC,EAAgBd,EAAY3E,QAAQ,SAACd,GAAD,OACxCA,EAAKE,KAAKsG,cAAcC,SAASb,EAAYY,kBAE/Cb,EAASY,KACV,CAACX,IAEJ5B,qBAAW,WACP0C,IACAf,GAAS,SAAAV,GAAK,OAAIA,KAClBS,GAAe,SAAAD,GAAW,OAAIA,OAE/B,CAACK,EAAiBG,IAErB,IAAMS,EAAsB,WACxB,IACIzB,EAAMlF,KAAK,SAAAC,GACP,IAAI2G,GAAO,EAMX,OALA3G,EAAKa,MAAMd,KAAI,SAAAgB,GAGP,OAFkB,IAAnBA,EAAKW,YACJiF,GAAO,GACA5F,KAERf,EAAKiE,kBAAoB0C,KAEpClB,EAAY1F,KAAK,SAAAC,GACb,IAAI2G,GAAO,EAMX,OALA3G,EAAKa,MAAMd,KAAI,SAAAgB,GAGP,OAFkB,IAAnBA,EAAKW,YACJiF,GAAO,GACA5F,KAERf,EAAKiE,kBAAoB0C,KAGxC,MAAMjE,GACFjC,QAAQoC,MAAM,UAAWH,KAuE3BZ,EAAU,uCAAG,8BAAApC,EAAA,6DAEfwG,EADIlG,EAAO,CAACE,KAAMA,EAAMC,MAAOA,IADhB,SAGMiG,EAAMtE,WAAW9B,GAHvB,OAGX4G,EAHW,OAIf3B,EAAM4B,KAAKD,GAEXZ,GAAa,GANE,2CAAH,qDAShB,OACI,kBAAC,EAAUc,SAAX,CAAoBvE,MAAO,CAAC0C,QAAOT,cAC/B,6BACI,yBAAKnC,UAAU,uBACX,wBAAIpC,GAAG,YAAP,WADJ,WAEY,2BAAOqC,KAAK,SAASyE,YAAY,cAActE,SA9ElD,SAACC,GAClBmD,EAAenD,EAAEC,OAAOJ,UA8EZ,2BAAOF,UAAU,aAAaC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBAAMwD,GAAa,OAGpFxB,EACD,yBAAKnC,UAAU,YACX,4CADJ,IAC0B,6BAD1B,SAEU,2BAAOC,KAAK,OAAOG,SAAQ,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,sEAAmB8D,EAAQd,EAAEC,OAAOJ,OAApC,mFAAH,wDAAkD,6BAFvF,UAGW,2BAAOD,KAAK,OAAOG,SAAQ,uCAAG,WAAOC,GAAP,SAAAhD,EAAA,sEAAmB+D,EAASf,EAAEC,OAAOJ,OAArC,mFAAH,wDAAmD,6BACrF,2BAAOF,UAAU,SAASC,KAAK,SAASC,MAAM,MAAMC,QAAU,kBAAMV,OACpE,2BAAOO,UAAU,SAASC,KAAK,SAASC,MAAM,SAASC,QAAU,kBAAMwD,GAAa,OAGxF,KAEJ,6BAAS3D,UAAU,cACf,kBAAC,EAAD,CACI6C,OAAQ,SAAA8B,GAAY,OA3FrB,SAACA,GAChB,IAAIC,EAAWhC,EAAMlF,KAAK,SAAAC,GAItB,OAHGA,EAAKC,KAAO+G,EAAa/G,KAC1BD,EAAOgH,GAEFhH,KAEX2F,EAASsB,GACTb,EAAMlF,WAAW8F,GAmFuB9F,CAAW8F,IACnC3F,OAAQ,SAAA6F,GAAY,OAjFrB,SAACA,GAChB,IAAID,EAAWhC,EAAMnE,QAAQ,SAAAd,GAAI,OAAIA,EAAKC,KAAOiH,EAAajH,MAC9D0F,EAASsB,GACTb,EAAMhF,WAAW8F,GA8EuB9F,CAAW8F,IACnC9B,oBAAsB,SAACrE,EAAMgC,GAAP,OA5ElB,SAAChC,EAAMgC,GAE3BgD,GAAoBD,GACpB,IACIb,EAAMlE,EAAKH,OAAO,GAAGC,MAAMkC,GAAOrB,WAAY,EAC9C+D,EAAY1E,EAAKH,OAAO,GAAGC,MAAMkC,GAAOrB,WAAY,EAEpD0E,EAAM9E,6BAA6BP,GAEvC,MAAM2B,GACFjC,QAAQoC,MAAM,UAAWH,IAkE0BO,CAAgBlC,EAAMgC,IAC7DsC,kBAAoB,SAACtE,GAAD,OA9DrB,SAACA,GAEhB,IACI,IAAIoG,EAAgBlC,EAAMlE,EAAKH,OAAO,GAAGC,MAAMuG,OAC/CnC,EAAMlE,EAAKH,OAAO,GAAGC,MAAMsG,GAAgBpG,EAC3C0E,EAAY1E,EAAKH,OAAO,GAAGC,MAAMsG,GAAgBpG,EAEjDqF,EAAM7E,WAAWR,GAGrB,MAAM2B,GACFjC,QAAQoC,MAAM,UAAWH,IAmDiBE,CAAW7B,IACzCa,WAAc,SAACD,GAAD,OAhDf,SAACA,GAChB,IACI,IAAI0F,EAAgBpC,EAAMtD,EAAKf,OAAO,GAAGK,MAAMmG,OAC/CnC,EAAMtD,EAAKf,OAAO,GAAGK,MAAMoG,GAAgB1F,EAC3C8D,EAAY9D,EAAKf,OAAO,GAAGK,MAAMoG,GAAgB1F,EAEjDyE,EAAMxE,WAAWD,GAErB,MAAMe,GACFjC,QAAQoC,MAAM,UAAWH,IAuCWd,CAAWD,WCpLrD2F,EAAmB,CACvBC,UAAW,CACTC,OAAQ,CACNjF,MAAO,GACPkF,QAAS,CACPC,QAAQ,EACRC,WAAY,QAmBLC,MAbf,WAGE,OACE,yBAAKvF,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YACrBwF,OAAQP,IAER,kBAAC,EAAD,QCdcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhG,GACLpC,QAAQoC,MAAMA,EAAMiG,a","file":"static/js/main.006a41ea.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst MyContext = React.createContext();\r\n\r\nexport default MyContext;","import axios from 'axios';\r\n\r\nconst getUsersList = async () => {\r\n    try {\r\n        let resp = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n        let data = resp.data;\r\n        if(data)\r\n        { return data.map( (user) => {\r\n            return  {id: user.id, name: user.name, email: user.email,\r\n                otherData: {street : user.address.street , city: user.address.city , zipcode: user.address.zipcode}\r\n              \r\n               }  \r\n        })}\r\n    }\r\n    \r\n    catch(err) {\r\n        console.log('Error getUsersList: ', err)\r\n    }\r\n}\r\n\r\n\r\n// const getUsersList = async () => {\r\n//     try {\r\n//         let resp = await axios.get('https://jsonplaceholder.typicode.com/users');\r\n//         let data = resp.data;\r\n//         if(data)\r\n//         { return data.map( async (user) => {\r\n//             let todos = await getTodosUser(user.id);\r\n//             let posts = await getPostsUser(user.id);\r\n//             let updateUser = await assign(user, todos, posts)\r\n//             return updateUser   \r\n//         })}\r\n//     }\r\n    \r\n//     catch(err) {\r\n//         console.log('Error getUsersList: ', err)\r\n//     }\r\n// }\r\n\r\n// const assign = (user, todos, posts) => {\r\n//     return {id: user.id, name: user.name, email: user.email,\r\n//         otherData: {street : user.address.street , city: user.address.city , zipcode: user.address.zipcode},\r\n//         todos: todos, posts: posts\r\n//        }\r\n    \r\n// }\r\n\r\nconst getTodosUser = async (userId) => {\r\n    try{\r\n        let resp = await axios.get(`https://jsonplaceholder.typicode.com/todos`);\r\n        let data = resp.data;\r\n        let todos = data.filter( task => {\r\n            return task.userId === userId;\r\n        } )\r\n    \r\n        return todos;\r\n    }\r\n    catch(err) {\r\n        console.log('Error getTodosUser: ', err);\r\n    }\r\n}\r\n\r\nconst getPostsUser = async (userId) => {\r\n    try {\r\n        let resp = await axios.get(`https://jsonplaceholder.typicode.com/posts`);\r\n        let data = resp.data;\r\n        let posts = data.filter( task => {\r\n            return task.userId === userId;\r\n        } )\r\n    \r\n        return posts;\r\n    }\r\n    catch(err) {\r\n        console.log('Error getPostsUser: ', err);\r\n    }\r\n}\r\n\r\nconst updateUser = async (user) => {\r\n    try \r\n    {\r\n        let resp = await axios.put(`https://jsonplaceholder.typicode.com/users/${user.id}`, user);\r\n        console.log('UPDATE USER DATA', resp.data)\r\n    }\r\n    catch(err) {\r\n        console.log('ERROR updateUser: ', err);\r\n    }\r\n   \r\n}\r\n\r\nconst deleteUser = async (user) => {\r\n    try {\r\n        let resp = await axios.delete(`https://jsonplaceholder.typicode.com/users/${user.id}`, user);\r\n        console.log('DELETE USER', resp.data)\r\n    }\r\n    catch(err) {\r\n        console.log('ERROR deleteUser: ', err);\r\n    }\r\n}\r\n\r\nconst updateIsTaskCompletedInTodos = async (task) => {\r\n    try {\r\n        let resp = await axios.put(`https://jsonplaceholder.typicode.com/todos/${task.id}`, task);\r\n        console.log('UPDATE POST COMPLETE', resp.data)\r\n    } \r\n    catch(err) {\r\n        console.log('ERROR updateIsTaskCompletedInTodos: ', err);\r\n    }\r\n}\r\n\r\nconst addNewTodo = async (task) => {\r\n    try {\r\n        let obj = {userId: task.userId , title: task.title, completed: task.completed }\r\n        let resp = await axios.post(`https://jsonplaceholder.typicode.com/todos`, obj)\r\n        console.log('Add TODO ', resp.data)\r\n    }\r\n    catch(err) {\r\n        console.log('ERROR addNewTodo: ', err);\r\n    }\r\n}\r\n\r\nconst addNewPost = async (post) => {\r\n    try {\r\n        let obj = {userId: post.userId , title: post.title, body: post.body}\r\n        let resp = await axios.post(`https://jsonplaceholder.typicode.com/posts`, obj)\r\n        console.log('Add POST ', resp.data)\r\n    }\r\n    catch(err) {\r\n        console.log('ERROR addNewPost: ', err);\r\n    }\r\n}\r\n\r\nconst addNewUser = async (user) => {\r\n    try {\r\n        let obj = {name: user.name, email: user.email}\r\n        let resp = await axios.post(`https://jsonplaceholder.typicode.com/users`, obj)\r\n        console.log('Add USER ', resp.data)\r\n        return resp.data;\r\n    }\r\n    catch(err) {\r\n        console.log('ERROR addNewUser: ', err);\r\n    }\r\n}\r\n\r\nexport default {getUsersList, getTodosUser, getPostsUser, updateUser, deleteUser,\r\n            updateIsTaskCompletedInTodos, addNewTodo, addNewPost, addNewUser};","import React, { useState } from 'react';\r\nimport './Todo.css';\r\n\r\nconst Todo = (props) => {\r\n\r\n    const [isNewTodo, setIsNewTodo] = useState(false);\r\n    // const [idNewTodo, setIdNewTodo] = useState(200);\r\n    const [title, setTitle] = useState('');\r\n\r\n    // useEffect(  () => {\r\n    //     if(title){\r\n    //     let task = {userId: props.todos[0].userId ,id: idNewTodo , title: title, completed: false }\r\n    //     props.addNewTask(task);\r\n    //     setIsNewTodo(false);}\r\n    // }, [idNewTodo])\r\n    // <input type=\"button\" value=\"Add2\" onClick={ () => {let temp = idNewTodo +1;setIdNewTodo(temp)} } />\r\n\r\n    const newTaskTodos = () => {\r\n        try {\r\n            let task = {userId: props.todos[0].userId ,id: 0, title: title, completed: false }\r\n            props.addNewTask(task);\r\n            setIsNewTodo(false);\r\n        }\r\n        catch(e) {\r\n            console.error('Error: ', e);\r\n        }\r\n    }\r\n\r\n    return( \r\n        <div>\r\n        <h3>Todos User: {props.userId}</h3>\r\n        <input className=\"button add\" type=\"button\" value=\"Add\" onClick={ () => setIsNewTodo(true) } />\r\n            <div className=\"todos-list\">\r\n            {\r\n                (isNewTodo) ? \r\n                <div className=\"new-todo\">\r\n                    Title: <input type='text' onChange={ async (e) => await setTitle(e.target.value) } />\r\n                    <input className=\"button\" type=\"button\" value=\"Add\" onClick={ () => newTaskTodos() } />\r\n                    <input className=\"button\" type=\"button\" value=\"Cancel\" onClick={ () => setIsNewTodo(false) } />\r\n                </div>\r\n                :\r\n                (props.todos) ?\r\n                    props.todos.map( (task, index) => {\r\n                        return (\r\n                            <div key={task.id} className=\"task-card\">\r\n                                {task.id} <br />\r\n                                Title: {task.title} <br />\r\n                                Completed: {(task.completed) ? 'Yes' : 'No'} \r\n                                {(!task.completed) ? \r\n                                <input className=\"button add\" type=\"button\" value=\"Mark Completed\" onClick={ () => props.updateCompleted(task,index) } />\r\n                                :\r\n                                null} <br />\r\n                            </div>)\r\n                    }) : null\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","import React, { useState } from 'react'\r\n\r\nimport './Post.css';\r\n\r\nconst Post = (props) => {\r\n\r\n    const [isNewPost, setIsNewPost] = useState(false);\r\n\r\n    const [title, setTitle] = useState('');\r\n    const [body, setBody] = useState('');\r\n\r\n    const newPost = () => {\r\n        let post = {userId: props.posts[0].userId ,id: 0, title: title, body: body }\r\n        props.addNewPost(post);\r\n        setIsNewPost(false);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n        <div className=\"position-posts-h3\">\r\n            <h3>Posts User: {props.userId}</h3>\r\n            <input className=\"button add\" type=\"button\" value=\"Add\" onClick={ () => setIsNewPost(true) } />\r\n        </div>\r\n        <div className=\"posts-list\">\r\n            \r\n\r\n            {\r\n                (isNewPost) ? \r\n                <div className=\"new-post\">\r\n                    Title: <input type='text' onChange={ async (e) => await setTitle(e.target.value) } /><br />\r\n                    Body: <input type='text' onChange={ async (e) => await setBody(e.target.value) } /><br />\r\n                    <input className=\"button\" type=\"button\" value=\"Add\" onClick={ () => newPost() } />\r\n                    <input className=\"button\" type=\"button\" value=\"Cancel\" onClick={ () => setIsNewPost(false) } />\r\n                </div>\r\n                :\r\n                props.posts.map( (post) => {\r\n                    return (\r\n                        <div key={post.id} className=\"post-card\">\r\n                            {post.id} <br />\r\n                            Title: {post.title} <br />\r\n                            Body: {post.body} \r\n                        </div>)\r\n                } )\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React, { useState, useEffect } from 'react';\r\n\r\nimport Todo from '../Todo/Todo';\r\nimport Post from '../Post/Post';\r\n\r\nimport './User.css';\r\n\r\nconst User = (props) => {\r\n\r\n    const [name, setName] = useState(props.user.name);\r\n    const [email, setEmail] = useState(props.user.email);\r\n\r\n    const [isOtherData, setisOtherData] = useState(false);\r\n\r\n    const [borderLineColor, setBorderLineColor] = useState('2px dashed green');\r\n    const [backgroundColor, setBackgroundColor] = useState('');\r\n\r\n    useEffect( () => {\r\n        if (props.user.allTasksCompleted){\r\n            setBorderLineColor('2px solid green');\r\n        }\r\n    } ,[props.user.allTasksCompleted]);\r\n\r\n    useEffect( () => {\r\n        if(props.user.id === props.selectedUser.id &&props.selectedUser.isSelected) {\r\n            setBackgroundColor('#00cc99');\r\n        }\r\n        else {\r\n            setBackgroundColor('')\r\n        }\r\n    }, [props.selectedUser, props.user.id])\r\n\r\n    const updateUser = () => {\r\n        const user = { id: props.user.id, name:name, email: email, otherData: props.user.otherData };\r\n        props.updateUser(user);\r\n    }\r\n\r\n    const deleteUser = () => {\r\n        const user = { id: props.user.id, name:name, email: email, otherData: props.user.otherData };\r\n        props.deleteUser(user);\r\n    }\r\n \r\n    const selected = () => {\r\n        if (props.selectedUser.id !==0) {\r\n            props.selectedUser.isSelected = !props.selectedUser.isSelected;\r\n        }\r\n        props.setSelected({id: props.user.id ,isSelected: !props.selectedUser.isSelected })\r\n    }\r\n\r\n    return (\r\n        <div className=\"user-card\" style={{ border: `${borderLineColor}`, background: `${backgroundColor}`}}>\r\n            <input className=\"button\" type=\"button\" value={`ID: ${props.user.id}`} \r\n                onClick={ () => selected() } /> <br />\r\n            \r\n            Name: <input className=\"text-box\" type=\"text\" value={name} onChange={ e => setName(e.target.value)}/> <br />\r\n            Email: <input className=\"text-box\" type=\"text\" value={email} onChange={ e => setEmail(e.target.value)} /> <br />\r\n            <input className=\"button\" type=\"button\" value=\"Other Data\" onClick={() => setisOtherData(!isOtherData)} />\r\n            {\r\n                (isOtherData) ? \r\n                    <div className=\"user-card-other-data\">\r\n                    {  \r\n                        (props.user.otherData) ?\r\n                        <div>\r\n                            Street: <input className=\"text-box-otherdata\" type=\"text\" value={props.user.otherData.street} /> <br/>\r\n                            City: <input className=\"text-box-otherdata\" type=\"text\" value={props.user.otherData.city} /> <br/>\r\n                            Zip Code: <input className=\"text-box-otherdata\" type=\"text\" value={props.user.otherData.zipcode} /> <br/>\r\n                        </div> : <div> No other data </div>\r\n                    }\r\n                    </div> :\r\n                    null\r\n            }\r\n            <input className=\"button\" type=\"button\" value=\"Update\" onClick={ () => updateUser() } />\r\n            <input className=\"button\" type=\"button\" value=\"Delete\" onClick={ () => deleteUser() } />\r\n            {\r\n                (props.selectedUser.id === props.user.id && props.selectedUser.isSelected && props.isNewUser === false) ?\r\n                <div key={props.user.id} className=\"todos-and-posts\">\r\n                    <Todo userId={props.user.id} todos={props.user.todos} updateCompleted={props.updateCompleted} \r\n                        addNewTask={props.addNewTask} />\r\n                    <Post userId={props.user.id} posts={props.user.posts} addNewPost={props.addNewPost} />\r\n                </div>\r\n                :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React, { useState } from 'react';\r\n\r\nimport MyContext from '../../MyContext';\r\n\r\nimport User from '../User/User';\r\n\r\nconst Users = (props) => {\r\n\r\n    const [selectedUser, setSelectedUser] = useState({id: 0, isSelected: false});\r\n\r\n    const [idNewTodo, setIdNewTodo] = useState(200);\r\n    const [idNewPost, setIdNewPost] = useState(100);\r\n    \r\n\r\n    const taskToadd = (task) => {\r\n        // setIdNewTodo(idNewTodo => (idNewTodo+1));\r\n        task.id = idNewTodo + 1;\r\n        setIdNewTodo(task.id);\r\n        props.addNewTaskToTodos(task)\r\n    }\r\n\r\n    const postToadd = (post) => {\r\n        post.id = idNewPost + 1;\r\n        setIdNewPost(post.id);\r\n        props.addNewPost(post);\r\n    }\r\n    \r\n    return (\r\n        <MyContext.Consumer>\r\n        {\r\n            context => (\r\n                context.users.map( user => {\r\n                    return <User key={user.id} user={user} updateUser={props.update} deleteUser={props.delete}\r\n                    selectedUser={selectedUser} setSelected={ (selected) => setSelectedUser(selected) }\r\n                    updateCompleted={props.updateCompletedTask}\r\n                    addNewTask={ (task) => taskToadd(task) }\r\n                    addNewPost = { (post) => postToadd(post) }\r\n                    isNewUser={context.isNewUser}\r\n                />\r\n                } )\r\n            )\r\n        }\r\n        </MyContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default Users;","import React, {useState, useEffect} from 'react';\r\n\r\nimport MyContext from '../../MyContext';\r\n\r\nimport utils from '../../utils';\r\nimport Users from '../UsersList/Users';\r\n\r\nimport './MasterDetails.css';\r\n\r\nconst MasterDetails = () => {\r\n\r\n    const [usersOrigin, setUsersOrigin] = useState([]);\r\n    const [users,setUsers] = useState([]);\r\n    const [searchField, setSearchField] = useState('');\r\n\r\n    const [isTaskCompleted, setIsTaskCompleted] = useState(false);\r\n\r\n    const [isNewUser, setIsNewUser] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [newUser, setNewUser] = useState('');\r\n\r\n    useEffect( () => {\r\n        let usersList ;\r\n        async function  forAwait() {\r\n            await utils.getUsersList().then(resp => usersList = resp );\r\n            await usersList.map( user => {\r\n                utils.getTodosUser(user.id).then( resp => user.todos = resp);\r\n                utils.getPostsUser(user.id).then( resp => user.posts = resp);\r\n                return user;\r\n            // user.allTasksCompleted = false;\r\n            } )\r\n        setUsers(usersList);\r\n        setUsersOrigin(usersList);\r\n        }\r\n        \r\n        forAwait();\r\n    }, [] );\r\n\r\n    // useEffect( () => {\r\n    //     utils.getUsersList().then(resp =>{ setUsers(resp);\r\n    //     setUsersOrigin(resp); })\r\n    // }, [] );\r\n\r\n    useEffect( ()=> {\r\n        const filteredUsers = usersOrigin.filter( (user) => \r\n          user.name.toLowerCase().includes(searchField.toLowerCase()) \r\n        );\r\n        setUsers(filteredUsers);\r\n    }, [searchField]);\r\n\r\n    useEffect( () => {\r\n        checkIfAllTodosDone();\r\n        setUsers(users => users);\r\n        setUsersOrigin(usersOrigin => usersOrigin);\r\n       \r\n    }, [isTaskCompleted, newUser]);\r\n    // point view - in the start not havee a user that all the task completed & new task initial completed: false\r\n    const checkIfAllTodosDone = () => {\r\n        try {\r\n            users.map( user => {\r\n                let flag = true;\r\n                user.todos.map(task => {\r\n                    if(task.completed === false)\r\n                        flag = false;\r\n                        return task;\r\n                } )\r\n                return user.allTasksCompleted = flag;\r\n            } )\r\n            usersOrigin.map( user => {\r\n                let flag = true;\r\n                user.todos.map(task => {\r\n                    if(task.completed === false)\r\n                        flag = false;\r\n                        return task;\r\n                } )\r\n                return user.allTasksCompleted = flag;\r\n            } )\r\n        }\r\n        catch(e) {\r\n            console.error('Error: ', e);\r\n        }\r\n        \r\n        // setUsers(users);\r\n        // setUsersOrigin(usersOrigin);\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        setSearchField(e.target.value);\r\n    }\r\n\r\n    const updateUser = (userToUpdate) => {\r\n        let newUsers = users.map( user => {\r\n            if(user.id === userToUpdate.id) {\r\n              user = userToUpdate\r\n            }\r\n            return user;\r\n        } )\r\n        setUsers(newUsers);\r\n        utils.updateUser(userToUpdate);\r\n    }\r\n\r\n    const deleteUser = (userToDelete) => {\r\n        let newUsers = users.filter( user => user.id !== userToDelete.id )\r\n        setUsers(newUsers);\r\n        utils.deleteUser(userToDelete);\r\n    }\r\n\r\n    const updateCompleted = (task, index) => {\r\n        // change in the user list\r\n        setIsTaskCompleted(!isTaskCompleted);\r\n        try {\r\n            users[task.userId-1].todos[index].completed = true;\r\n            usersOrigin[task.userId-1].todos[index].completed = true;\r\n            //change in the server -> utils files -> create a function\r\n            utils.updateIsTaskCompletedInTodos(task);\r\n        }\r\n        catch(e) {\r\n            console.error('Error: ', e)\r\n        }\r\n       \r\n    }\r\n\r\n    const addNewTask = (task) => {\r\n        //add to state  \r\n        try {\r\n            let lenTodosUser =  users[task.userId-1].todos.length;\r\n            users[task.userId-1].todos[lenTodosUser] = task;\r\n            usersOrigin[task.userId-1].todos[lenTodosUser] = task;\r\n            //add to server -> function in utils file\r\n            utils.addNewTodo(task);\r\n\r\n        }\r\n        catch(e) {\r\n            console.error('Error: ', e)\r\n        }\r\n    }\r\n\r\n    const addNewPost = (post) => {\r\n        try {\r\n            let lenPostsUser =  users[post.userId-1].posts.length;\r\n            users[post.userId-1].posts[lenPostsUser] = post;\r\n            usersOrigin[post.userId-1].posts[lenPostsUser] = post;\r\n            //add to server -> function in utils file\r\n            utils.addNewPost(post);\r\n        }\r\n        catch(e) {\r\n            console.error('Error: ', e)\r\n        }\r\n    }\r\n\r\n    const addNewUser = async () => {\r\n        let user = {name: name, email: email}\r\n        setNewUser(user)\r\n        let userRest = await utils.addNewUser(user)\r\n        users.push(userRest);\r\n        // usersOrigin.push(userRest);\r\n        setIsNewUser(false);\r\n    }\r\n\r\n    return (\r\n        <MyContext.Provider value={{users, isNewUser}}>\r\n            <div>\r\n                <div className=\"title-search-button\">\r\n                    <h1 id=\"users-h1\">Users: </h1>\r\n                    Serach: <input type='search' placeholder='Search User' onChange={handleChange} />\r\n                    <input className=\"button add\" type=\"button\" value=\"Add\" onClick={ () => setIsNewUser(true)} />\r\n                </div>\r\n                {\r\n                    (isNewUser) ? \r\n                    <div className=\"new-user\">\r\n                        <h3>Add New User</h3> <br />\r\n                        Name: <input type='text' onChange={ async (e) => await setName(e.target.value) } /><br />\r\n                        Email: <input type='text' onChange={ async (e) => await setEmail(e.target.value) } /><br />\r\n                        <input className=\"button\" type=\"button\" value=\"Add\" onClick={ () => addNewUser() } />\r\n                        <input className=\"button\" type=\"button\" value=\"Cancel\" onClick={ () => setIsNewUser(false) } />\r\n                    </div> \r\n                    :\r\n                    null\r\n                }\r\n                <section className=\"users-list\">\r\n                    <Users \r\n                        update={userToUpdate => updateUser(userToUpdate)}\r\n                        delete={userToDelete => deleteUser(userToDelete)}\r\n                        updateCompletedTask={ (task, index) => updateCompleted(task, index) }\r\n                        addNewTaskToTodos={ (task) => addNewTask(task) }\r\n                        addNewPost= { (post) => addNewPost(post) } />\r\n                </section>\r\n            </div>\r\n        </MyContext.Provider>\r\n    )\r\n}\r\n\r\nexport default MasterDetails;","import React from 'react';\nimport Particles from 'react-particles-js';\nimport './App.css';\n\nimport MasterDetails from './components/MasterDetails/MasterDetails';\n\nconst particlesOptions = {\n  particles: {\n    number: {\n      value: 90,\n      density: {\n        enable: true,\n        value_area: 800\n      }\n    }\n  }\n}\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Particles className='particles'\n      params={particlesOptions}\n      />\n      <MasterDetails />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}